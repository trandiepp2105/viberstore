version: "3.8"

services:
  # Service cho Frontend (Client) React App
  viberstore_frontend:
    container_name: viberstore_frontend
    build:
      context: ./frontend # Đường dẫn đến thư mục chứa Dockerfile của frontend
      dockerfile: Dockerfile
    ports:
      # Map port 8081 của VM (host) vào port 80 của container frontend
      # Nginx reverse proxy trên VM sẽ trỏ đến http://127.0.0.1:8081
      - "8081:80"
    restart: unless-stopped
    networks:
      - localnet

  # Service cho Admin React App
  viberstore_admin:
    container_name: viberstore_admin # Đổi tên cho nhất quán, hoặc giữ viberstore_admin nếu muốn
    build:
      context: ./admin # Đường dẫn đến thư mục chứa Dockerfile của admin
      dockerfile: Dockerfile
    ports:
      # Map port 8082 của VM (host) vào port 80 của container admin
      # Nginx reverse proxy trên VM sẽ trỏ đến http://127.0.0.1:8082
      - "8082:80"
    restart: unless-stopped
    networks:
      - localnet

  # Backend Service (giữ nguyên cấu hình của bạn)
  viberstore_backend:
    container_name: viberstore_backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/backend
    ports:
      - "8000:8000" # Backend Django/Node.js/etc. chạy trên port 8000
    depends_on:
      viberstore_mysql:
        condition: service_healthy
    env_file:
      - ./.env
    networks:
      - localnet
    stdin_open: true
    tty: true

  # Elasticsearch Service (giữ nguyên cấu hình của bạn)
  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:8.0.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD} # Đã có trong env_file
    env_file:
      - ./.env
    ports:
      - "9200:9200"
    volumes: # Thêm volume để dữ liệu Elasticsearch tồn tại
      - elasticsearch-data:/usr/share/elasticsearch/data
    restart: unless-stopped # Thêm restart policy
    networks:
      - localnet

  viberstore_mysql:
    image: mysql:8.0
    container_name: viberstore_mysql
    ports:
      - "3309:3309"
    env_file:
      - ./.env
    volumes:
      - viberstore-mysql:/var/lib/mysql
      - ./initial_data:/docker-entrypoint-initdb.d
      - ./mysql_custom_conf:/etc/mysql/conf.d
    restart: always
    command:
      # - mysqld
      - --port=3309
    # command:
    #   [
    #     "/bin/bash",
    #     "-c",
    #     "chmod +x /docker-entrypoint-initdb.d/99_create_import_done_flag.sh && exec mysqld --port=3309",
    #   ]

    healthcheck:
      # Kiểm tra sự tồn tại của file cờ hiệu
      test: ["CMD-SHELL", "test -f /var/lib/mysql/initial_data_imported.flag"]
      interval: 5s # Kiểm tra mỗi 5 giây
      timeout: 2s # Timeout cho mỗi lần kiểm tra
      retries:
        72 # Thử lại tối đa 72 lần (tương đương 6 phút chờ: 72 * 5s)
        # Điều chỉnh số lần thử lại (retries) và start_period dựa trên
        # kích thước file SQL của bạn và thời gian import dự kiến.
      start_period: 60s # Chờ 60 giây sau khi container khởi động rồi mới bắt đầu
    networks:
      - localnet

  # Redis Service (giữ nguyên cấu hình của bạn)
  viberstore_redis:
    container_name: viberstore_redis
    image: redis:latest
    ports:
      - "6379:6379"
    entrypoint: [
        "sh",
        "-c",
        "mkdir -p /usr/local/etc/redis && \
        echo 'bind 0.0.0.0\nport 6379\nmaxmemory-policy noeviction' > /usr/local/etc/redis/redis.conf && \
        redis-server /usr/local/etc/redis/redis.conf",
      ]
    restart: "always" # Giữ nguyên 'always' nếu bạn muốn, 'unless-stopped' cũng là lựa chọn tốt
    volumes:
      - redis-data:/data
    networks:
      - localnet

volumes:
  viberstore-mysql:
  redis-data:
  elasticsearch-data: # Thêm volume cho Elasticsearch

networks:
  localnet:
    driver: bridge
