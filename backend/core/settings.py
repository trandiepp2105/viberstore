# settings.py
"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from celery.schedules import crontab # Import crontab để định nghĩa lịch
import pillow_avif
import pillow_heif
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Tốt nhất nên lấy từ biến môi trường trong production
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY','django-insecure-))^w$3cj4jd%w4fh-l)2gl^881l2dut%*ob^1$1w^*-_5=50pc')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'

CSRF_TRUSTED_ORIGINS = [
    'http://26.178.178.33:3001',
    'http://26.178.178.33:3000',
    'http://127.0.0.1:3000',
    'http://126.0.0.1:3001',
]
# config origins 26.178.178.33
CORS_ALLOWED_ORIGINS = [
    'http://26.178.178.33:3001',
    'http://26.178.178.33:3000',
    'http://127.0.0.1:3000',
    'http://126.0.0.1:3001',
]

# trust origins


CORS_ALLOW_CREDENTIALS = True


ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '26.178.178.33']
# Thêm các domain production của bạn vào đây hoặc dùng biến môi trường
# ALLOWED_HOSTS.extend(os.environ.get('DJANGO_ALLOWED_HOSTS', '').split(','))


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third Party Apps
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'django_celery_beat', # App cho Celery Beat Scheduler
    # 'django.contrib.sites', # Bỏ comment nếu dùng allauth
    # 'allauth',
    # 'allauth.account',
    # 'allauth.socialaccount',
    # 'allauth.socialaccount.providers.google',
    'drf_yasg', # Cho Swagger/OpenAPI docs

    # Your Apps
    'user',
    'product',
    'cart',
    'order',
    'marketing',
    'feedback',
    'address',
    'payment',
]


# config admin account
ADMIN_EMAIL = "admin@gmail.com"
ADMIN_PASSWORD = "admin"


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware', # Nên đặt sớm, trước CommonMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'allauth.account.middleware.AccountMiddleware', # Bỏ comment nếu dùng allauth
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # Thêm dòng này nếu có template chung
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request', # Cần thiết cho allauth và nhiều thứ khác
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('MYSQL_DATABASE', 'viberstore'),
        'USER': os.getenv('MYSQL_USER', 'root'),
        'PASSWORD': os.getenv('MYSQL_PASSWORD', 'Diep2105@'), # Nên dùng biến môi trường!
        'HOST': os.getenv('MYSQL_HOST', 'localhost'),
        'PORT': os.getenv('MYSQL_PORT', '3306'),
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'", # Đảm bảo chế độ SQL phù hợp
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]


# Internationalization & Timezone
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us' # Hoặc 'vi-vn' nếu bạn muốn

# Đảm bảo chỉ có MỘT định nghĩa TIME_ZONE và USE_TZ
TIME_ZONE = 'Asia/Ho_Chi_Minh' # Đặt timezone chính xác của bạn
USE_I18N = True
USE_TZ = True # Bật hỗ trợ timezone


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
# STATIC_ROOT = BASE_DIR / 'staticfiles' # Thư mục thu thập static files cho production
# STATICFILES_DIRS = [BASE_DIR / 'static'] # Thư mục chứa static files trong quá trình phát triển

# Media files (User uploaded content)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'user.User'

# CORS Configuration
# CORS_ALLOW_ALL_ORIGINS = True # Cho phép tất cả các nguồn (cẩn thận trong production)
# Trong production, nên dùng:
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000", # Địa chỉ frontend dev
#     "https://yourfrontenddomain.com",
# ]


# REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication', # Giữ lại nếu dùng cả Django Admin/Session Auth
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly', # Ví dụ: cho phép đọc nếu không đăng nhập
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
}

# Simple JWT Configuration
# ALGORITHM nên định nghĩa ở đây hoặc lấy từ biến môi trường
ALGORITHM = "HS256"
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'ALGORITHM': ALGORITHM,
    'SIGNING_KEY': SECRET_KEY, # Sử dụng SECRET_KEY chính của dự án
    'AUTH_HEADER_TYPES': ('Bearer',), # Chuẩn JWT header
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'TOKEN_TYPE_CLAIM': 'token_type',
    "TOKEN_OBTAIN_SERIALIZER": "user.serializers.CustomTokenObtainPairSerializer", # Serializer tùy chỉnh của bạn
    'JTI_CLAIM': 'jti',
    # 'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    # 'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    # 'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# Email Configuration (Gmail SMTP)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'tranvandiepp2105@gmail.com')
# !!! QUAN TRỌNG: Sử dụng biến môi trường cho mật khẩu email !!!
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', 'kkos mrpa zgpe jmrv') # Đây nên là App Password nếu dùng Gmail 2FA
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


# Cache Configuration (Redis)
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.environ.get('REDIS_CACHE_URL', 'redis://127.0.0.1:6379/1'), # Database 1 cho cache
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            # Có thể thêm các tùy chọn khác như password nếu Redis có mật khẩu
            # 'PASSWORD': os.environ.get('REDIS_PASSWORD'),
        }
        # 'KEY_PREFIX': 'myapp' # Tùy chọn
    }
}

# VNPAY Configuration
# !!! QUAN TRỌNG: Sử dụng biến môi trường cho các key nhạy cảm !!!
VNPAY_RETURN_URL = os.environ.get('VNPAY_RETURN_URL', 'http://26.178.178.33:3001/payment')
VNPAY_PAYMENT_URL = os.environ.get('VNPAY_PAYMENT_URL', 'https://sandbox.vnpayment.vn/paymentv2/vpcpay.html')
VNPAY_API_URL = os.environ.get('VNPAY_API_URL', 'https://sandbox.vnpayment.vn/merchant_webapi/api/transaction')
VNPAY_TMN_CODE = os.environ.get('VNPAY_TMN_CODE', 'GO9RGB4P')
VNPAY_HASH_SECRET_KEY = os.environ.get('VNPAY_HASH_SECRET_KEY', '3M54IMQIY2B94VJGSTJGLGBDXNSPJIOE')

# Django Allauth (Commented Out - Bỏ comment nếu sử dụng)
# AUTHENTICATION_BACKENDS = {
#     'django.contrib.auth.backends.ModelBackend', # Giữ lại backend mặc định
#     'allauth.account.auth_backends.AuthenticationBackend',
# }
# SOCIALACCOUNT_PROVIDERS = {
#     'google': {
#         'APP': {
#             'client_id': os.environ.get('GOOGLE_CLIENT_ID', 'YOUR_GOOGLE_CLIENT_ID'),
#             'secret': os.environ.get('GOOGLE_CLIENT_SECRET', 'YOUR_GOOGLE_CLIENT_SECRET'),
#             'key': '' # Thường không cần thiết
#         },
#         'SCOPE': ['openid', 'profile', 'email'],
#         'AUTH_PARAMS': {'access_type': 'online'},
#         'OAUTH_PKCE_ENABLED': True,
#     }
# }
# SITE_ID = 1 # Cần thiết cho allauth
# ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_USERNAME_REQUIRED = False
# ACCOUNT_AUTHENTICATION_METHOD = 'email'
# ACCOUNT_EMAIL_VERIFICATION = 'optional' # hoặc 'mandatory'
# LOGIN_REDIRECT_URL = '/' # Trang chuyển hướng sau khi đăng nhập
# ACCOUNT_LOGOUT_REDIRECT_URL = '/' # Trang chuyển hướng sau khi đăng xuất

# OAuth2 Provider (Nếu bạn đang xây dựng server OAuth2)
# OAUTH2_PROVIDER = {
#     'ACCESS_TOKEN_EXPIRE_SECONDS': 3600,
#     'OIDC_ENABLED': True,
#     'OIDC_ISS_ENDPOINT': 'http://localhost:8000/oauth/', # Cập nhật endpoint của bạn
#     'SCOPES': {
#         'openid': 'OpenID Connect scope',
#         'email': 'Access to your email address',
#         'profile': 'Access to your basic profile information',
#     },
# }

# Other settings
APPEND_SLASH=False # Giữ nguyên nếu API của bạn không yêu cầu dấu / ở cuối

# ==============================================================================
# CELERY CONFIGURATION
# ==============================================================================
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://127.0.0.1:6379/0') # Database 0 cho Broker
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://127.0.0.1:6379/0') # Database 0 cho Results
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE # Sử dụng TIME_ZONE đã định nghĩa ở trên
CELERY_ENABLE_UTC = False   # Tắt UTC khi đã dùng timezone cụ thể

# Celery Beat Configuration
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_BEAT_SCHEDULE = {
    'publish-scheduled-products-job': {
        'task': 'product.tasks.publish_scheduled_products', # Đảm bảo đường dẫn đúng
        'schedule': crontab(minute='*/5'), # Chạy mỗi 5 phút
        # 'args': (), # Thêm args nếu task cần
        # 'kwargs': {}, # Thêm kwargs nếu task cần
    },
    # Thêm các task định kỳ khác nếu cần
}
# ==============================================================================
# END CELERY CONFIGURATION
# ==============================================================================